# Author/Maintainer: Max Lapshin <max@maxidoors.ru>
require 'rubygems'
require_gem 'activerecord'

require 'active_record/connection_adapters/abstract_adapter'

module ActiveRecord
  class Base
    def self.intersys_connection(config)
      config = config.symbolize_keys
      require 'intersys' unless const_defined?(Intersys)
      intersys = Intersys::Database.new(config)
      ConnectionAdapters::IntersysAdapter.new(intersys, logger, config)
    end
  end
  
  module ConnectionAdapters
    class IntersysAdapter < AbstractAdapter
      attr_reader :config
      def initialize(database, logger, config)
        super(database, logger)
        @config = config
      end
      
      def adapter_name #:nodoc:
        'Intersys CachÃ©'
      end
      
      def supports_migrations? #:nodoc:
        false
      end
      
      def active?
        warn "IntersysAdapter#active? not implemented"
        return true
        @connection.query "select 1"
      rescue Intersys::IntersysException
        false
      end
      
      def disconnect!
        @connection.close! rescue nil
      end
      
      def reconnect!
        disconnect!
        connect
      end
      
      def begin_db_transaction
        @connection.start
      end
      def commit_db_transaction
        @connection.commit
      end
      def rollback_db_transaction
        @connection.rollback
      end
      
      def add_limit_offset!(sql, options)
        sql << " LIMIT #{limit}" if limit = options[:limit]
        sql << " OFFSET #{offset}" if offset = options[:offset]
      end
      
      def select_all(sql, name = nil) #:nodoc:
        select(sql, name)
      end

      def select_one(sql, name = nil) #:nodoc:
        result = select(sql, name)
        result.nil? ? nil : result.first
      end

      def insert(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil) #:nodoc:
        execute(sql, name = nil)
        id_value || @connection.insert_id
      end

      def update(sql, name = nil) #:nodoc:
        execute(sql, name)
        @connection.affected_rows
      end

      alias_method :delete, :update #:nodoc:
        
      
      
      def columns(table_name, name = nil)
        @cdef = Intersys::Reflection::ClassDefinition.open("User.#{table_name.camelize}")
        result = [IntersysColumn.new("id", "", "int")]
        @cdef.properties.each do |prop|
          result << IntersysColumn.new(prop.sql_field_name, prop.initial_expression, prop.Type.gsub("%","").underscore, prop.required)
        end
        result
      end

      def native_database_types
        {
          :primary_key => 'int generated by default as identity (start with 42) primary key',
          :string      => { :name => 'varchar', :limit => 255 },
          :text        => { :name => 'clob', :limit => 32768 },
          :integer     => { :name => 'int' },
          :float       => { :name => 'float' },
          :datetime    => { :name => 'timestamp' },
          :timestamp   => { :name => 'timestamp' },
          :time        => { :name => 'time' },
          :date        => { :name => 'date' },
          :binary      => { :name => 'blob', :limit => 32768 },
          :boolean     => { :name => 'decimal', :limit => 1 }
        }
      end
      
    protected
      # :nodoc
      def connect
        @connection = Intersys::Database.new(config)
      end
      
      def select(sql, name = nil)
        @connection.query(sql)
      end

      def execute(sql, name = nil)
        @connection.execute(sql)
      end
    end
    
    class IntersysColumn < Column
    end
  end
end